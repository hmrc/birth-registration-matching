# Copyright 2020 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main configuration file for the application.
# ~~~~~

include "backend.conf"

appName=birth-registration-matching

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.play.bootstrap.http.RequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform backend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.MicroserviceModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

play.http.filters = "uk.gov.hmrc.play.bootstrap.filters.MicroserviceFilters"
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.http.JsonErrorHandler"

# Session Timeout
# ~~~~
# The default session timeout for the app is 15 minutes (900seconds).
# Updating this is the responsibility of the app - it must issue a new cookie with each request or the session will
# timeout 15 minutes after login (regardless of user activity).
# session.maxAge=900

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="6cv1Q56308MVjGM7azKVLuy2Rynfu8IPlRkoK0NSm7PRDaWo1zKYg8EPB4VBwlNx"

# Session configuration
# ~~~~~
application.session.httpOnly=false

application.session.secure=false
# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global=uk.gov.hmrc.brm.config.MicroserviceGlobal

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
application.router=prod.Routes

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
  # 300 is the default, you may need to change this according to your needs
  confidenceLevel = 300

  com.kenshoo.play.metrics.MetricsController = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }

  uk.gov.hmrc.brm.controllers.MicroserviceHelloWorld = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }

  uk.gov.hmrc.brm.controllers.BirthEventsController = {
    needsAuth = false
    needsLogging = true
    needsAuditing = true
  }

}


# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true
}


# Microservice specific config

auditing {
  enabled=true
  traceRequests=true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

microservice {

  metrics {
    graphite {
      host = graphite
      port = 2003
      prefix = play.${appName}.
      enabled = false
    }
  }

  services {

    auth {
      host=localhost
      port=8500
    }

    birth-registration-matching {
      host = localhost
      port = 9006
      key = key
      username = username

      # feature switches for the properties we match on
      matching {
        firstName = true
        lastName = true
        dateOfBirth = true
        matchOnMultiple = false
        # ignore middle names on the record when matching against payload and consider additional name field.
        ignoreAdditionalNames = false
      }

      features {
        # generic feature switches are implemented here
        dobValidation.enabled = true
        # reject attempts before date specified
        dobValidation.value = "2009-07-01"

        flags {
          logging = true
          process = true
        }

        # downstream service specific switches are implemented here
        gro {
          # do we allow requests for England and Wales
          enabled = true
          # do we allow requests that have a BRN number
          reference.enabled = true
          # do we allow requests without a BRN number
          details.enabled = true
          # determine if we need to process flags based on returned values
          flags {
            process.enabled = true
            potentiallyFictitiousBirth.process = true
            blockedRegistration.process = true
            correction.process = false
            cancelled.process = true
            marginalNote.process = true
            reRegistered.process = true
          }
        }
        
        nrs {
          enabled = true
          reference.enabled = true
          details.enabled = true
        }
        groni {
          enabled = false
          reference.enabled = false
          details.enabled = false
        }
      }
    }

    des {
      host = localhost
      port = 9007
      env = dev
      auth-token = xxxx
    }

  }
}
